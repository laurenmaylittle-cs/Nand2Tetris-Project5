// This file is BASED ON part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: project05starter/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[8],          // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[8],         // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Your code here!
       
    Not(in=instruction[15], out=aInstruction);
    Or(a=instruction[15],b=false,out=cInstruction);
    And(a=cInstruction, b=instruction[5], out=CToA);
    Or(a=aInstruction, b=CToA, out=writingA);
    Mux16(a[0..14]=instruction[0..14], b[0..7]=aluOut, b[8..15]=currentAHigh, sel=CToA,out=nextA);
    ARegister(in=nextA, load=writingA, out=currentA,out[0..7]=currentALow, out[8..15]=currentAHigh, out[0..14]=addressM);
    And(a=cInstruction,b=instruction[4], out=writingD);
    DRegister(in[0..7]=aluOut,load=writingD, out[0..7]=nextD);
    Mux16(a=currentA, b[0..7]=inM, sel=instruction[12], out[0..7]=outAM);

    ALU(
        //x[0..7]=true, 
        //y[0..7]=true,
        x[8..15]=nextD, 
        y[8..15]=outAM,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out[8..15]=aluOut, 
        out[8..15]=outM,
        zr=isZeroOut,
        ng=isNegOut
        );


    Or(a=isZeroOut,b=isNegOut, out=nonPos);
    Not(in=nonPos, out= isPositive);
    And(a=isPositive,b=instruction[0],out=JGT); 
    And(a=isZeroOut,b=instruction[1],out=JEQ);    
    And(a=isNegOut,b=instruction[2],out=JLT); 

    Or(a=JEQ,b=JLT,out=JLE);
    Or(a=JLE,b=JGT,out=jumpA);
    And(a=cInstruction, b=jumpA, out=PCToLoad);
    //Not(in=PCToLoad,out=pcInc);
    PC(in=currentA, inc=true, load=PCToLoad, reset=reset, out[0..14]=pc);

    And(a=instruction[3], b=instruction[15], out=writeM);

}
